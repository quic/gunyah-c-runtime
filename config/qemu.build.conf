# Â© 2021 Qualcomm Innovation Center, Inc. All rights reserved.
#
# SPDX-License-Identifier: BSD-3-Clause

#static_lib runtime
program runtime
arch aarch64

board qemu

# set the target board, right now it's qemu
# FIXME: should we have some predefined setting for each SOC/platform?
target_triple aarch64-linux-gnu
cflags -march=armv8.2-a -mcpu=cortex-a75
ldflags -mcpu=cortex-a75

# for debug
# FIXME: check how to conditionally enable debug or use different variant
# config file?
cflags -O1 -g
#configs NDEBUG

cflags -std=gnu18
# Turn all warnings on as errors by default
cflags -Weverything
cflags -Werror

# depress the warning for header file from compiler
# FIXME: double check if it's right
cflags -Wno-reserved-id-macro

# Unused macros are expected
cflags -Wno-unused-macros

# MISRA rule 16.4 requires default: in every switch, even if it is covered
cflags -Wno-covered-switch-default

# No need for C++ compatibility
cflags -Wno-c++98-compat
cflags -Wno-c++-compat

# No need for GCC compatibility
cflags -Wno-gcc-compat

# Section garbage collection, reduce size & do better job to remove dead code
# it's better to disable them for gprof & debug.
cflags -ffunction-sections
cflags -fdata-sections

# Avoid runtime touch float point register V0 - V31. So there's no need to
# save and restore these registers.
cflags -mgeneral-regs-only

# target specific cflags
cflags -ffreestanding -ftls-model=local-exec -fpie

# target specific ldflags
ldflags -static-pie

# Use C18. For the purposes of MISRA, the language is C99 and all differences
# between C99 and C18 are language extensions permitted by a project deviation
# from rule 1.2.
ldflags -Wl,--gc-sections

cppflags -nostdlibinc

ldflags -nostdlib -fuse-ld=lld

# Set the max-page-size to prevent large ELF alignments
ldflags -Wl,-z,max-page-size=4096
# Set separate-loadable-segments for ELF alignments
ldflags -Wl,-z,separate-loadable-segments

include include

sub_directory arch/armv8
sub_directory arch/generic
sub_directory src

#end_static_lib
end_program
